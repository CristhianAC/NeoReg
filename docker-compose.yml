services:
  api-gateway:
    image: traefik:v2.10
    ports:
      - "80:80" # HTTP
      - "8080:8080" # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik-config:/etc/traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.dashboard=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
    labels:
      # Definir middleware global de CORS
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE,PATCH"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolalloworigin=*"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowheaders=Content-Type,Authorization,X-Requested-With"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors-headers.headers.addvaryheader=true"
    networks:
      - neoreg-network

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    command: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service.rule=PathPrefix(`/api/users`)"
      - "traefik.http.middlewares.user-service-strip.stripprefix.prefixes=/api/users"
      # Aquí agregamos el middleware de CORS a este router
      - "traefik.http.routers.user-service.middlewares=user-service-strip,cors-headers"
    networks:
      - neoreg-network

  worker-service:
    build:
      context: ./services/worker-service
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    command: sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.worker-service.rule=PathPrefix(`/api/workers`)"
      - "traefik.http.middlewares.worker-service-strip.stripprefix.prefixes=/api/workers"
      # Aquí agregamos el middleware de CORS a este router
      - "traefik.http.routers.worker-service.middlewares=worker-service-strip,cors-headers"
    networks:
      - neoreg-network

  rag-service:
    build:
      context: ./services/rag-service
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    depends_on:
      - user-service
    environment:
      - USER_SERVICE_URL=http://user-service:8000
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rag-service.rule=PathPrefix(`/api/rag`)"
      - "traefik.http.middlewares.rag-service-strip.stripprefix.prefixes=/api/rag"
      # Aquí agregamos el middleware de CORS a este router
      - "traefik.http.routers.rag-service.middlewares=rag-service-strip,cors-headers"
    networks:
      - neoreg-network

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - neoreg-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - neoreg-network

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - neoreg-network

networks:
  neoreg-network:
    driver: bridge

volumes:
  postgres_data:
  vector_data:
  redis_data:
  prometheus_data:
  grafana_data:
